[hekad]
maxprocs = 2  # # of cores heka can use

[UdpInput]
address = "<%= @udp_listen_address %>"
parser_type = "message.proto"
decoder = "ProtobufDecoder"

[StatAccumulator]
type="StatAccumInput"
legacy_namespaces = true
emit_in_payload = true
emit_in_fields = true
ticker_interval = 5

[StatsdInput]
address = "<%= @statsd_address %>"
stat_accum_name = 'StatAccumulator'

[NginxAccessStatAccum]
type = "StatAccumInput"

[NginxAccessMetrics]
type = "StatFilter"
message_matcher = "Type == 'nginx.access'"
stat_accum_name = "NginxAccessStatAccum"

[NginxAccessMetrics.Metric.status_code]
type = "Counter"
name = "nginx.access.%Logger%.%status%"
value = "1"

[CarbonOutput]
message_matcher = "Type == 'heka.statmetric'"
address = "<%= @carbon_output_address %>"

<% if @log_output -%>
# You can comment this block out if you don't want hekad to spew log
# messages to stdout
[LogOutput]
message_matcher = "TRUE"
payload_only = false
<% end -%>

[SentryOutput]
max_udp_sockets = 100
max_sentry_bytes = 100000
message_matcher = "Type == 'sentry'"

[DashboardOutput]
ticker_interval = 5
static_directory = "/usr/share/heka/dasher"

[sbxmgr_ctrl_input]
type = "TcpInput"
parser_type = "message.proto"
decoder = "ProtobufDecoder"
address = "0.0.0.0:5566"
    [sbxmgr_ctrl_input.signer.dev_0]
    hmac_key = "<%= @sandbox_hmac_key %>"

[dev_sbxmgr]
type = "SandboxManagerFilter"
message_signer = "dev"
message_matcher = "Type == 'heka.control.sandbox'"
max_filters = 100

<% if @elasticsearch_url -%>
[ESLogstashV0Encoder]
es_index_from_timestamp = true

[ElasticSearchOutput]
message_matcher = "Type == 'app.log' || Type == 'nginx.error' || Type == 'host.log'"
server = "<%= elasticsearch_url %>"
flush_interval = 5000
flush_count = 10
encoder = "ESLogstashV0Encoder"
<% end -%>
